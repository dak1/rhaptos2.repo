// Generated by CoffeeScript 1.3.3
(function() {

  define(['underscore', 'backbone', 'marionette', 'jquery', './languages', 'hbs!app/views/content-list', 'hbs!app/views/content-list-item', 'hbs!app/views/modal-wrapper', 'hbs!app/views/edit-metadata', 'hbs!app/views/edit-roles', 'hbs!app/views/language-variants', 'hbs!app/views/aloha-toolbar', 'bootstrap', 'select2'], function(_, Backbone, Marionette, jQuery, Languages, SEARCH_RESULT, SEARCH_RESULT_ITEM, MODAL_WRAPPER, EDIT_METADATA, EDIT_ROLES, LANGUAGE_VARIANTS, ALOHA_TOOLBAR) {
    var ContentEditView, DELAY_BEFORE_SAVING, KEYWORDS_URL, LANGUAGES, METADATA_SUBJECTS, MODAL_SPINNER_OPTIONS, MetadataEditView, ModalWrapper, RolesEditView, SELECT2_AJAX_HANDLER, SearchResultItemView, SearchResultView, USERS_URL, languageCode, value, _ref;
    KEYWORDS_URL = '/keywords/';
    USERS_URL = '/users/';
    DELAY_BEFORE_SAVING = 3000;
    SELECT2_AJAX_HANDLER = function(url) {
      return {
        quietMillis: 500,
        url: url,
        dataType: 'json',
        data: function(term, page) {
          return {
            q: term
          };
        },
        results: function(data, page) {
          var id;
          return {
            results: (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = data.length; _i < _len; _i++) {
                id = data[_i];
                _results.push({
                  id: id,
                  text: id
                });
              }
              return _results;
            })()
          };
        }
      };
    };
    METADATA_SUBJECTS = ['Arts', 'Mathematics and Statistics', 'Business', 'Science and Technology', 'Humanities', 'Social Sciences'];
    MODAL_SPINNER_OPTIONS = {
      lines: 13,
      length: 16,
      width: 6,
      radius: 27,
      corners: 1,
      rotate: 0,
      color: '#444',
      speed: 0.9,
      trail: 69,
      shadow: false,
      hwaccel: false,
      className: 'spinner',
      zIndex: 2e9,
      top: 'auto',
      left: '265px'
    };
    LANGUAGES = [
      {
        code: '',
        "native": '',
        english: ''
      }
    ];
    _ref = Languages.getLanguages();
    for (languageCode in _ref) {
      value = _ref[languageCode];
      value = jQuery.extend({}, value);
      jQuery.extend(value, {
        code: languageCode
      });
      LANGUAGES.push(value);
    }
    SearchResultItemView = Marionette.ItemView.extend({
      template: SEARCH_RESULT_ITEM
    });
    SearchResultView = Marionette.CompositeView.extend({
      template: SEARCH_RESULT,
      itemView: SearchResultItemView,
      initialize: function() {
        var _this = this;
        this.listenTo(this.collection, 'reset', function() {
          return _this.render();
        });
        return this.listenTo(this.collection, 'update', function() {
          return _this.render();
        });
      }
    });
    ContentEditView = Marionette.ItemView.extend({
      template: function(serialized_model) {
        return "<div class='content-edit-view'><div class='toolbar aloha-dialog'></div><div class='body'>" + (serialized_model.body || 'This module is empty. Please change it') + "</div></div>";
      },
      initialize: function() {
        var _this = this;
        return this.listenTo(this.model, 'change:body', function(model, value) {
          var alohaEditable, alohaId, editableBody;
          alohaId = _this.$el.find('.body').attr('id');
          if (alohaId && _this.$el.parents()[0]) {
            alohaEditable = Aloha.getEditableById(alohaId);
            editableBody = alohaEditable.getContents();
            if (value !== editableBody) {
              return alohaEditable.setContents(value);
            }
          } else {
            return _this.$el.find('.body').empty().append(value);
          }
        });
      },
      onRender: function() {
        var $body, $toolbar, updateModelAndSave,
          _this = this;
        this.$el.find('math').wrap('<span class="math-element aloha-cleanme"></span>');
        if (typeof MathJax !== "undefined" && MathJax !== null) {
          MathJax.Hub.Configured();
        }
        $body = this.$el.find('.body');
        $toolbar = this.$el.find('.toolbar');
        $body.aloha();
        setTimeout((function() {
          return $body.focus();
        }), 100);
        $toolbar.html(ALOHA_TOOLBAR({}));
        updateModelAndSave = function() {
          var alohaEditable, alohaId, editableBody;
          alohaId = $body.attr('id');
          if (alohaId) {
            alohaEditable = Aloha.getEditableById(alohaId);
            editableBody = alohaEditable.getContents();
            return _this.model.save('body', editableBody);
          }
        };
        return $body.on('blur', updateModelAndSave);
      }
    });
    MetadataEditView = Marionette.ItemView.extend({
      template: function() {
        return '<div class="metadata"></div>';
      },
      events: {
        'change select[name=language]': '_updateLanguageVariant'
      },
      _updateLanguage: function() {
        var lang, language;
        language = this.model.get('language') || '';
        lang = language.split('-')[0];
        this.$el.find("select[name=language] option[value=" + lang + "]").attr('selected', true);
        return this._updateLanguageVariant();
      },
      _updateLanguageVariant: function() {
        var $language, $variant, code, lang, language, variant, variants, _ref1, _ref2;
        $language = this.$el.find('select[name=language]');
        language = this.model.get('language') || '';
        _ref1 = language.split('-'), lang = _ref1[0], variant = _ref1[1];
        if ($language.val() !== lang) {
          lang = $language.val();
          variant = null;
        }
        $variant = this.$el.find('select[name=variantLanguage]');
        variants = [];
        _ref2 = Languages.getCombined();
        for (code in _ref2) {
          value = _ref2[code];
          if (code.slice(0, 2) === lang) {
            jQuery.extend(value, {
              code: code
            });
            variants.push(value);
          }
        }
        if (variants.length > 0) {
          $variant.removeAttr('disabled');
          $variant.html(LANGUAGE_VARIANTS({
            'variants': variants
          }));
          return $variant.find("option[value=" + language + "]").attr('selected', true);
        } else {
          return $variant.html('').attr('disabled', true);
        }
      },
      _updateSelect2: function(inputName, modelKey) {
        var subject, _i, _len, _ref1, _results;
        this.$el.find("input[name=" + inputName + "]").attr('checked', false);
        _ref1 = this.model.get(modelKey) || [];
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          subject = _ref1[_i];
          _results.push(this.$el.find("input[name=" + inputName + "][value='" + subject + "']").attr('checked', true));
        }
        return _results;
      },
      _updateSubjects: function() {
        var subject, _i, _len, _ref1, _results;
        this.$el.find('input[name=subjects]').attr('checked', false);
        _ref1 = this.model.get('subjects') || [];
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          subject = _ref1[_i];
          _results.push(this.$el.find("input[name=subjects][value='" + subject + "']").attr('checked', true));
        }
        return _results;
      },
      _updateKeywords: function() {
        return this.$el.find('input[name=keywords]').select2('val', this.model.get('keywords'));
      },
      render: function() {
        var $keywords, templateObj;
        templateObj = jQuery.extend({}, this.model.toJSON());
        templateObj._languages = LANGUAGES;
        templateObj._subjects = METADATA_SUBJECTS;
        this.$el.append(EDIT_METADATA(templateObj));
        $keywords = this.$el.find('*[name=keywords]');
        $keywords.select2({
          tags: this.model.get('keywords') || [],
          tokenSeparators: [','],
          separator: '|',
          ajax: SELECT2_AJAX_HANDLER(KEYWORDS_URL),
          initSelection: function(element, callback) {
            var data;
            data = [];
            _.each(element.val().split('|'), function(str) {
              return data.push({
                id: str,
                text: str
              });
            });
            return callback(data);
          }
        });
        this._updateLanguage();
        this._updateSubjects();
        this._updateKeywords();
        this.delegateEvents();
        this.$el.find('input[name=title]').focus();
        return this;
      },
      attrsToSave: function() {
        var checkbox, keywords, kw, language, subjects, title, variant;
        title = this.$el.find('input[name=title]').val();
        language = this.$el.find('select[name=language]').val();
        variant = this.$el.find('select[name=variantLanguage]').val();
        if (variant) {
          language = variant;
        }
        subjects = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = this.$el.find('input[name=subjects]:checked');
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            checkbox = _ref1[_i];
            _results.push(jQuery(checkbox).val());
          }
          return _results;
        }).call(this);
        keywords = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = this.$el.find('*[name=keywords]').val().split('|');
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            kw = _ref1[_i];
            _results.push(kw);
          }
          return _results;
        }).call(this);
        return {
          title: title,
          language: language,
          subjects: subjects,
          keywords: keywords
        };
      }
    });
    RolesEditView = Marionette.ItemView.extend({
      template: EDIT_ROLES,
      onRender: function() {
        var $authors, $copyrightHolders;
        $authors = this.$el.find('*[name=authors]');
        $copyrightHolders = this.$el.find('*[name=copyrightHolders]');
        $authors.select2({
          tags: this.model.get('authors') || [],
          tokenSeparators: [','],
          separator: '|'
        });
        $copyrightHolders.select2({
          tags: this.model.get('copyrightHolders') || [],
          tokenSeparators: [','],
          separator: '|'
        });
        this._updateAuthors();
        this._updateCopyrightHolders();
        this.delegateEvents();
        return this;
      },
      _updateAuthors: function() {
        return this.$el.find('*[name=authors]').select2('val', this.model.get('authors') || []);
      },
      _updateCopyrightHolders: function() {
        return this.$el.find('*[name=copyrightHolders]').select2('val', this.model.get('copyrightHolders') || []);
      },
      attrsToSave: function() {
        var authors, copyrightHolders, kw;
        authors = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = this.$el.find('*[name=authors]').val().split('|');
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            kw = _ref1[_i];
            _results.push(kw);
          }
          return _results;
        }).call(this);
        copyrightHolders = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = this.$el.find('*[name=copyrightHolders]').val().split('|');
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            kw = _ref1[_i];
            _results.push(kw);
          }
          return _results;
        }).call(this);
        return {
          authors: authors,
          copyrightHolders: copyrightHolders
        };
      }
    });
    ModalWrapper = (function() {

      function ModalWrapper(view, title) {
        var _this = this;
        this.view = view;
        this.view.render();
        this.$el = jQuery(MODAL_WRAPPER({
          title: title
        }));
        this.$el.find('.modal-body').html('').append(this.view.$el);
        this.$el.on('click', '.save', function(evt) {
          var attrs;
          evt.preventDefault();
          attrs = _this.view.attrsToSave();
          return _this.view.model.save(attrs, {
            success: function(res) {
              _this.view.model.trigger('sync');
              return _this.$el.modal('hide');
            },
            error: function(res) {
              return alert('Something went wrong when saving: ' + res);
            }
          });
        });
      }

      ModalWrapper.prototype.show = function() {
        if (!this.$el.parent()[0]) {
          this.$el.appendTo('body');
        }
        return this.$el.modal({
          keyboard: true
        });
      };

      ModalWrapper.prototype.hide = function() {
        return this.$el.modal('hide');
      };

      return ModalWrapper;

    })();
    return {
      WorkspaceView: SearchResultView,
      ModalWrapper: ModalWrapper,
      MetadataEditView: MetadataEditView,
      RolesEditView: RolesEditView,
      ContentEditView: ContentEditView
    };
  });

}).call(this);
