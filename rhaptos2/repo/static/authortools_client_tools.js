// Generated by CoffeeScript 1.3.3

/*
  authoringtools_client_tools.{coffee,js} - The script used set up and control
    the extended tools interface. These are the tools that are found in the
    tools dropdown in the interface.

  Author: Michael Mulich
  Copyright (c) 2012 Rice University

  This software is subject to the provisions of the GNU Lesser General
  Public License Version 2.1 (LGPL).  See LICENSE.txt for details.
*/


(function() {
  var MetadataModal, RolesModal, exports, _generate_metadata_url,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  exports = {};

  _generate_metadata_url = function(id) {
    return MODULEURL + id + '/metadata';
  };

  MetadataModal = (function() {

    function MetadataModal() {
      this.submit_handler = __bind(this.submit_handler, this);
      this.$el = $('#metadata-modal');
      this.render();
    }

    MetadataModal.prototype.submit_handler = function(event) {
      var data, module_id;
      data = {};
      $.map($('#metadata-modal form').serializeArray(), function(obj) {
        return data[obj['name']] = obj['value'];
      });
      module_id = serialise_form().uuid;
      console.log('Posting metadata for module: ' + module_id);
      $.ajax({
        type: 'POST',
        url: _generate_metadata_url(module_id),
        data: JSON.stringify(data, null, 2),
        dataType: 'json',
        contentType: 'application/json',
        success: function() {
          return $('#metadata-modal').modal('hide');
        }
      });
      return false;
    };

    MetadataModal.prototype.language_handler = function() {
      var $variant_lang, code, selected_code, template, value, variants, _ref;
      selected_code = $(this).val();
      variants = [];
      _ref = Language.getCombined();
      for (code in _ref) {
        value = _ref[code];
        if (code.slice(0, 2) === selected_code) {
          $.extend(value, {
            code: code
          });
          variants.push(value);
        }
      }
      $variant_lang = $('#metadata-modal select[name="variant_language"]');
      if (variants.length > 0) {
        variants.splice(0, 0, {
          code: '',
          english: ''
        });
        template = '{{#variants}}<option value="{{code}}">{{english}}</option>{{/variants}}';
        return $variant_lang.removeAttr('disabled').html(Mustache.to_html(template, {
          'variants': variants
        }));
      } else {
        return $('#metadata-modal select[name="variant_language"]').html('').attr('disabled', 'disabled');
      }
    };

    MetadataModal.prototype.render = function() {
      var data, language_code, languages, value, _ref;
      data = {};
      languages = [
        {
          code: '',
          "native": '',
          english: ''
        }
      ];
      _ref = Language.getLanguages();
      for (language_code in _ref) {
        value = _ref[language_code];
        $.extend(value, {
          'code': language_code
        });
        languages.push(value);
      }
      $.extend(data, {
        'languages': languages
      });
      $('#metadata-modal .modal-body').html(Mustache.to_html(Templates.metadata, data));
      $('#metadata-modal select[name="language"]').change(this.language_handler);
      return $('#metadata-modal button[type="submit"]').click(this.submit_handler);
    };

    return MetadataModal;

  })();

  RolesModal = (function() {

    function RolesModal() {
      this.$el = $('#roles-modal');
      this.render();
    }

    RolesModal.prototype.render = function() {
      var data;
      data = {};
      return $('#roles-modal .modal-body').html(Mustache.to_html(Templates.roles, data));
    };

    return RolesModal;

  })();

  exports.construct = function() {
    var metadata_modal, modal_link_id, roles_modal, _i, _len, _ref;
    $('.dropdown-toggle').dropdown();
    _ref = ['#import-link', '#metadata-link', '#roles-link', '#sharing-link', '#publish-link'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      modal_link_id = _ref[_i];
      $(modal_link_id).modal({
        show: false
      });
    }
    $('#import-modal .modal-body').html(Mustache.to_html(Templates.metadata, {}));
    metadata_modal = new MetadataModal();
    roles_modal = new RolesModal();
    $('#sharing-modal .modal-body').html(Mustache.to_html(Templates.sharing, {}));
    return $('#publish-modal .modal-body').html(Mustache.to_html(Templates.publish, {}));
  };

  window.Tools = exports;

}).call(this);
