// Generated by CoffeeScript 1.3.3

/*
  authoringtools_client_tools.{coffee,js} - The script used set up and control
    the extended tools interface. These are the tools that are found in the
    tools dropdown in the interface.

  Author: Michael Mulich
  Copyright (c) 2012 Rice University

  This software is subject to the provisions of the GNU Lesser General
  Public License Version 2.1 (LGPL).  See LICENSE.txt for details.
*/


(function() {
  var MetadataModal, ROLES, RoleCollection, RoleEntry, RolesModal, exports, _form_values_to_object, _generate_metadata_url,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  exports = {};

  _generate_metadata_url = function(id) {
    return MODULEURL + id + '/metadata';
  };

  _form_values_to_object = function(selector) {
    var data;
    data = {};
    $.map($(selector).serializeArray(), function(obj) {
      return data[obj['name']] = obj['value'];
    });
    return data;
  };

  MetadataModal = (function() {

    function MetadataModal() {
      this.submit_handler = __bind(this.submit_handler, this);
      this.$el = $('#metadata-modal');
      this.render();
    }

    MetadataModal.prototype.submit_handler = function(event) {
      var data, module_id;
      data = _form_values_to_object('#metadata-modal form');
      module_id = serialise_form().uuid;
      console.log('Posting metadata for module: ' + module_id);
      $.ajax({
        type: 'POST',
        url: _generate_metadata_url(module_id),
        data: JSON.stringify(data, null, 2),
        dataType: 'json',
        contentType: 'application/json',
        success: function() {
          return $('#metadata-modal').modal('hide');
        }
      });
      return false;
    };

    MetadataModal.prototype.language_handler = function() {
      var $variant_lang, code, selected_code, template, value, variants, _ref;
      selected_code = $(this).val();
      variants = [];
      _ref = Language.getCombined();
      for (code in _ref) {
        value = _ref[code];
        if (code.slice(0, 2) === selected_code) {
          $.extend(value, {
            code: code
          });
          variants.push(value);
        }
      }
      $variant_lang = $('#metadata-modal select[name="variant_language"]');
      if (variants.length > 0) {
        variants.splice(0, 0, {
          code: '',
          english: ''
        });
        template = '{{#variants}}<option value="{{code}}">{{english}}</option>{{/variants}}';
        return $variant_lang.removeAttr('disabled').html(Mustache.to_html(template, {
          'variants': variants
        }));
      } else {
        return $('#metadata-modal select[name="variant_language"]').html('').attr('disabled', 'disabled');
      }
    };

    MetadataModal.prototype.render = function() {
      var data, language_code, languages, value, _ref;
      data = {};
      languages = [
        {
          code: '',
          "native": '',
          english: ''
        }
      ];
      _ref = Language.getLanguages();
      for (language_code in _ref) {
        value = _ref[language_code];
        $.extend(value, {
          'code': language_code
        });
        languages.push(value);
      }
      $.extend(data, {
        'languages': languages
      });
      $('#metadata-modal .modal-body').html(Mustache.to_html(Templates.metadata, data));
      $('#metadata-modal select[name="language"]').change(this.language_handler);
      return $('#metadata-modal button[type="submit"]').click(this.submit_handler);
    };

    return MetadataModal;

  })();

  ROLES = ["Author", "Maintainer", "Copyright Holder"];

  RoleEntry = (function() {
    /*
        Data for a single role.
    */

    function RoleEntry(name, roles, collection) {
      this.name = name;
      this.roles = roles;
      this.collection = collection || null;
    }

    return RoleEntry;

  })();

  RoleCollection = (function() {
    /*
        A collection/container of RoleEntry objects.
    */

    function RoleCollection(entries) {
      var entry, _i, _len;
      this.entries = entries || [];
      for (_i = 0, _len = entries.length; _i < _len; _i++) {
        entry = entries[_i];
        entry.collection = this;
      }
    }

    return RoleCollection;

  })();

  RolesModal = (function() {

    function RolesModal() {
      this.$el = $('#roles-modal');
      this.render();
    }

    RolesModal.prototype.render = function() {
      var $rendered_entry, collection, data, entries, entry, role, roles, value, _i, _j, _len, _len1, _ref, _results;
      entries = [new RoleEntry('Michael', ['Maintainer', 'Copyright Holder']), new RoleEntry('Isabel', ['Author'])];
      collection = new RoleCollection(entries);
      $('#roles-modal .modal-body').html(Mustache.to_html(Templates.roles, {
        roles_vocabulary: ROLES
      }));
      _ref = collection.entries;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        data = $.extend({}, entry);
        roles = [];
        for (_j = 0, _len1 = ROLES.length; _j < _len1; _j++) {
          role = ROLES[_j];
          value = {
            name: role
          };
          if (__indexOf.call(entry.roles, role) >= 0) {
            value.selected = true;
          }
          roles.push(value);
        }
        $.extend(data, {
          roles: roles
        });
        $rendered_entry = $(Mustache.to_html(Templates.roles_name_entry, data));
        $('input[type="checkbox"]', $rendered_entry).click(this._role_selected_handler(entry));
        _results.push($('#roles-modal tbody').append($rendered_entry));
      }
      return _results;
    };

    RolesModal.prototype._role_selected_handler = function(entry) {
      /*
            Creates an event handler that will modify the given RoleEntry based
            on the selection.
      */

      var event_handler,
        _this = this;
      event_handler = function(event) {
        var $target, role_name;
        $target = $(event.target);
        role_name = $target.val();
        if ($target.is(':checked')) {
          entry.roles.push(role_name);
          return console.log("Gave the '" + role_name + "' role to '" + entry.name + "'.");
        } else {
          entry.roles.pop(entry.roles.indexOf(role_name));
          return console.log("Took the '" + role_name + "' role away from '" + entry.name + "'.");
        }
      };
      return event_handler;
    };

    return RolesModal;

  })();

  exports.construct = function() {
    var metadata_modal, modal_link_id, roles_modal, _i, _len, _ref;
    $('.dropdown-toggle').dropdown();
    _ref = ['#import-link', '#metadata-link', '#roles-link', '#sharing-link', '#publish-link'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      modal_link_id = _ref[_i];
      $(modal_link_id).modal({
        show: false
      });
    }
    $('#import-modal .modal-body').html(Mustache.to_html(Templates.metadata, {}));
    metadata_modal = new MetadataModal();
    roles_modal = new RolesModal();
    $('#sharing-modal .modal-body').html(Mustache.to_html(Templates.sharing, {}));
    return $('#publish-modal .modal-body').html(Mustache.to_html(Templates.publish, {}));
  };

  window.Tools = exports;

}).call(this);
