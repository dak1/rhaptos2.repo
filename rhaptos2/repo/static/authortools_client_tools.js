// Generated by CoffeeScript 1.3.3

/*
  authoringtools_client_tools.{coffee,js} - The script used set up and control
    the extended tools interface. These are the tools that are found in the
    tools dropdown in the interface.

  Author: Michael Mulich
  Copyright (c) 2012 Rice University

  This software is subject to the provisions of the GNU Lesser General
  Public License Version 2.1 (LGPL).  See LICENSE.txt for details.
*/


(function() {
  var MetadataModal, ROLES, RolesModal, exports, _form_values_to_object, _generate_metadata_url,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  exports = {};

  _generate_metadata_url = function(id) {
    return MODULEURL + id + '/metadata';
  };

  _form_values_to_object = function(selector) {
    var data;
    data = {};
    $.map($(selector).serializeArray(), function(obj) {
      return data[obj['name']] = obj['value'];
    });
    return data;
  };

  MetadataModal = (function() {

    function MetadataModal() {
      this.submit_handler = __bind(this.submit_handler, this);
      this.$el = $('#metadata-modal');
      this.render();
    }

    MetadataModal.prototype.submit_handler = function(event) {
      var data, module_id;
      data = _form_values_to_object('#metadata-modal form');
      module_id = serialise_form().uuid;
      console.log('Posting metadata for module: ' + module_id);
      $.ajax({
        type: 'POST',
        url: _generate_metadata_url(module_id),
        data: JSON.stringify(data, null, 2),
        dataType: 'json',
        contentType: 'application/json',
        success: function() {
          return $('#metadata-modal').modal('hide');
        }
      });
      return false;
    };

    MetadataModal.prototype.language_handler = function() {
      var $variant_lang, code, selected_code, template, value, variants, _ref;
      selected_code = $(this).val();
      variants = [];
      _ref = Language.getCombined();
      for (code in _ref) {
        value = _ref[code];
        if (code.slice(0, 2) === selected_code) {
          $.extend(value, {
            code: code
          });
          variants.push(value);
        }
      }
      $variant_lang = $('#metadata-modal select[name="variant_language"]');
      if (variants.length > 0) {
        variants.splice(0, 0, {
          code: '',
          english: ''
        });
        template = '{{#variants}}<option value="{{code}}">{{english}}</option>{{/variants}}';
        return $variant_lang.removeAttr('disabled').html(Mustache.to_html(template, {
          'variants': variants
        }));
      } else {
        return $('#metadata-modal select[name="variant_language"]').html('').attr('disabled', 'disabled');
      }
    };

    MetadataModal.prototype.render = function() {
      var data, language_code, languages, value, _ref;
      data = {};
      languages = [
        {
          code: '',
          "native": '',
          english: ''
        }
      ];
      _ref = Language.getLanguages();
      for (language_code in _ref) {
        value = _ref[language_code];
        $.extend(value, {
          'code': language_code
        });
        languages.push(value);
      }
      $.extend(data, {
        'languages': languages
      });
      $('#metadata-modal .modal-body').html(Mustache.to_html(Templates.metadata, data));
      $('#metadata-modal select[name="language"]').change(this.language_handler);
      return $('#metadata-modal button[type="submit"]').click(this.submit_handler);
    };

    return MetadataModal;

  })();

  ROLES = ["Author", "Maintainer", "Copyright Holder"];

  RolesModal = (function() {

    function RolesModal() {
      this.handle_addition = __bind(this.handle_addition, this);
      this.$el = $('#roles-modal');
      this.render();
    }

    RolesModal.prototype.render = function() {
      var data, entries, entry, partials, _i, _len;
      data = {};
      entries = [
        {
          name: 'Michael',
          roles: ['Maintainer', 'Copyright Holder']
        }, {
          name: 'Isabel',
          roles: ['Author']
        }
      ];
      for (_i = 0, _len = entries.length; _i < _len; _i++) {
        entry = entries[_i];
        this._transform_entry_roles_to_object(entry);
      }
      data.entries = entries;
      data.roles_vocabulary = ROLES;
      partials = {
        roles_name_entry: Templates.roles_name_entry
      };
      $('#roles-modal .modal-body').html(Mustache.to_html(Templates.roles, data, partials));
      return $('form[name="role-entry-form"] button').click(this.handle_addition);
    };

    RolesModal.prototype._transform_entry_roles_to_object = function(entry) {
      var role, roles, value, _i, _len;
      roles = [];
      for (_i = 0, _len = ROLES.length; _i < _len; _i++) {
        role = ROLES[_i];
        value = {
          name: role
        };
        if (__indexOf.call(entry.roles, role) >= 0) {
          value.selected = true;
        }
        roles.push(value);
      }
      $.extend(entry, {
        roles: roles
      });
      return entry;
    };

    RolesModal.prototype.handle_addition = function(event) {
      var $form, form_data;
      $form = $('form[name="role-entry-form"]');
      form_data = _form_values_to_object($form);
      $.extend(form_data, {
        roles: []
      });
      this._transform_entry_roles_to_object(form_data);
      $('#roles-modal tbody').append(Mustache.to_html(Templates.roles_name_entry, form_data));
      $form[0].reset();
      return false;
    };

    return RolesModal;

  })();

  exports.construct = function() {
    var metadata_modal, modal_link_id, roles_modal, _i, _len, _ref;
    $('.dropdown-toggle').dropdown();
    _ref = ['#import-link', '#metadata-link', '#roles-link', '#sharing-link', '#publish-link'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      modal_link_id = _ref[_i];
      $(modal_link_id).modal({
        show: false
      });
    }
    $('#import-modal .modal-body').html(Mustache.to_html(Templates.metadata, {}));
    metadata_modal = new MetadataModal();
    roles_modal = new RolesModal();
    $('#sharing-modal .modal-body').html(Mustache.to_html(Templates.sharing, {}));
    return $('#publish-modal .modal-body').html(Mustache.to_html(Templates.publish, {}));
  };

  window.Tools = exports;

}).call(this);
