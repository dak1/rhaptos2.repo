// Generated by CoffeeScript 1.3.3
(function() {

  define(['jquery', 'underscore', 'backbone', 'aloha', 'app/models', 'app/views', 'i18n!app/nls/strings', 'css!app'], function(jQuery, _, Backbone, Aloha, Models, Views, __) {
    var $main, AppRouter, Backbone_sync_orig, MODULE_SUBMIT_HREF_HACK, appRouter, setMainView, thisView, x,
      _this = this;
    MODULE_SUBMIT_HREF_HACK = '/module/';
    this.jQuery = this.$ = function() {
      console.warn('You should add "jquery" to your dependencies in define() instead of using the global jQuery!');
      return jQuery.apply(this, arguments);
    };
    jQuery.extend(this.jQuery, jQuery);
    Backbone_sync_orig = Backbone.sync;
    Backbone.sync = function(method, model, options) {
      var data, href, params;
      if ('update' === method) {
        data = _.extend({}, model.toJSON());
        data.json = JSON.stringify(model);
        href = MODULE_SUBMIT_HREF_HACK || options['url'] || model.get('url' || (function() {
          throw 'URL to sync to not defined';
        })());
        href = "" + href + "?" + (jQuery.param(model.toJSON()));
        params = {
          type: 'PUT',
          url: href,
          data: JSON.stringify(model),
          processData: false,
          dataType: 'json',
          contentType: 'application/json'
        };
        return jQuery.ajax(_.extend(params, options));
      } else {
        return Backbone_sync_orig(method, model, options);
      }
    };
    $main = $("#main");
    thisView = null;
    setMainView = function(view) {
      if (thisView && thisView === view) {
        return thisView;
      }
      if (thisView) {
        thisView.remove();
      }
      $main.empty().append(view.el);
      view.render();
      thisView = view;
      return view;
    };
    AppRouter = Backbone.Router.extend({
      routes: {
        '': 'index',
        'module/:id': 'module'
      },
      index: function() {
        var view, workspace;
        workspace = new Models.Workspace();
        workspace.fetch();
        view = new Views.WorkspaceView({
          collection: workspace
        });
        setMainView(view);
        return workspace.on('change', function() {
          return view.render();
        });
      },
      module: function(id) {
        var contentEditView, module;
        if (id == null) {
          id = null;
        }
        if (id) {
          module = new Models.Module({
            id: id,
            url: "/module/" + id
          });
          module.fetch();
        } else {
          module = new Models.Module();
        }
        jQuery('#metadata-link').off('click');
        jQuery('#roles-link').off('click');
        jQuery('#metadata-link').on('click', function(evt) {
          var modal;
          evt.preventDefault();
          modal = new Views.ModalWrapper(new Views.MetadataEditView({
            model: module
          }), __('Edit Metadata'));
          return modal.show();
        });
        jQuery('#roles-link').on('click', function(evt) {
          var modal;
          evt.preventDefault();
          modal = new Views.ModalWrapper(new Views.RolesEditView({
            model: module
          }), __('Edit Roles'));
          return modal.show();
        });
        contentEditView = new Views.ContentEditView({
          model: module
        });
        return setMainView(contentEditView);
      }
    });
    appRouter = new AppRouter();
    x = Backbone.history.start();
    return jQuery(document).on('click', 'a:not([data-bypass])', function(evt) {
      var href;
      href = $(this).attr('href');
      if (href) {
        evt.preventDefault();
        return Backbone.history.navigate(href, true);
      }
    });
  });

}).call(this);
